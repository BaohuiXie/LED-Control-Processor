/*
###############################################################
#  Generated by:      Cadence Innovus 20.10-p004_1
#  OS:                Linux x86_64(Host ID EEX055)
#  Generated on:      Sat May  7 00:58:28 2022
#  Design:            decoder
#  Command:           saveNetlist results/decoder.routed.v
###############################################################
*/
module Counter (
	count, 
	out, 
	clk, 
	globalReset, 
	EN);
   output [3:0] count;
   output out;
   input clk;
   input globalReset;
   input EN;

   // Internal wires
   wire N25;
   wire N26;
   wire N27;
   wire N28;
   wire n5;
   wire n7;
   wire n8;
   wire n9;
   wire n10;
   wire n11;
   wire n12;
   wire n13;
   wire n14;
   wire n15;
   wire n16;
   wire n17;
   wire n18;
   wire n19;

   DFFSRX1 count_reg_0_ (.SN(1'b1),
	.RN(n5),
	.Q(count[0]),
	.D(N25),
	.CK(clk));
   DFFSRX1 count_reg_1_ (.SN(1'b1),
	.RN(n5),
	.Q(count[1]),
	.D(N26),
	.CK(clk));
   DFFSRX1 count_reg_2_ (.SN(n5),
	.RN(1'b1),
	.Q(count[2]),
	.D(N27),
	.CK(clk));
   DFFSRX1 count_reg_3_ (.SN(n5),
	.RN(1'b1),
	.Q(count[3]),
	.D(N28),
	.CK(clk));
   DFFSRX1 out_reg (.SN(1'b1),
	.RN(n5),
	.Q(out),
	.D(n19),
	.CK(clk));
   INVX4 U7 (.Y(n5),
	.A(globalReset));
   NAND2X2 U9 (.Y(n13),
	.B(n15),
	.A(count[3]));
   NAND2X2 U10 (.Y(n16),
	.B(n9),
	.A(count[2]));
   INVX1 U11 (.Y(n7),
	.A(n14));
   INVX1 U12 (.Y(n8),
	.A(n12));
   INVX1 U13 (.Y(n9),
	.A(n18));
   INVX1 U14 (.Y(n10),
	.A(EN));
   NOR2X1 U15 (.Y(n19),
	.B(n10),
	.A(n11));
   AOI22X1 U16 (.Y(n11),
	.B1(n8),
	.B0(out),
	.A1(n12),
	.A0(count[0]));
   NAND3X1 U17 (.Y(N28),
	.C(EN),
	.B(n7),
	.A(n13));
   NAND3X1 U18 (.Y(N27),
	.C(EN),
	.B(n15),
	.A(n16));
   NOR3X1 U19 (.Y(N26),
	.C(n17),
	.B(n14),
	.A(n10));
   AOI21X1 U20 (.Y(n17),
	.B0(n18),
	.A1(count[0]),
	.A0(count[1]));
   NOR2X1 U21 (.Y(n14),
	.B(count[3]),
	.A(n15));
   OR2X1 U22 (.Y(n15),
	.B(count[2]),
	.A(n9));
   NOR2X1 U23 (.Y(n18),
	.B(count[1]),
	.A(count[0]));
   NOR3X1 U24 (.Y(N25),
	.C(n12),
	.B(count[0]),
	.A(n10));
   NOR3X1 U25 (.Y(n12),
	.C(count[1]),
	.B(count[3]),
	.A(count[2]));
endmodule

module Comparator4BitInverted (
	Vout, 
	A, 
	REF);
   output Vout;
   input [3:0] A;
   input [3:0] REF;

   // Internal wires
   wire n1;
   wire n2;
   wire n3;
   wire n4;
   wire n5;
   wire n6;
   wire n7;
   wire n8;
   wire n9;
   wire n10;
   wire n11;

   INVX1 U3 (.Y(n1),
	.A(n7));
   INVX1 U4 (.Y(n2),
	.A(n8));
   INVX1 U5 (.Y(n3),
	.A(A[2]));
   INVX1 U6 (.Y(n4),
	.A(n11));
   INVX1 U7 (.Y(n5),
	.A(A[0]));
   OAI22X1 U8 (.Y(Vout),
	.B1(n7),
	.B0(n6),
	.A1(n1),
	.A0(A[3]));
   AOI22X1 U9 (.Y(n6),
	.B1(n3),
	.B0(n2),
	.A1(n9),
	.A0(n8));
   OAI21X1 U10 (.Y(n9),
	.B0(n10),
	.A1(n4),
	.A0(A[1]));
   OAI21X1 U11 (.Y(n10),
	.B0(n4),
	.A1(n5),
	.A0(REF[0]));
   XOR2X1 U12 (.Y(n11),
	.B(REF[1]),
	.A(A[1]));
   XOR2X1 U13 (.Y(n8),
	.B(REF[2]),
	.A(n3));
   XOR2X1 U14 (.Y(n7),
	.B(REF[3]),
	.A(A[3]));
endmodule

module delayBlock (
	delayPulse, 
	reCLK, 
	REF, 
	globalReset, 
	osc);
   output delayPulse;
   input reCLK;
   input [3:0] REF;
   input globalReset;
   input osc;

   // Internal wires
   wire compOut;
   wire EN;
   wire [3:0] counterOut;

   Counter counter1 (.count(counterOut),
	.out(delayPulse),
	.clk(osc),
	.globalReset(globalReset),
	.EN(EN));
   Comparator4BitInverted comp1 (.Vout(compOut),
	.A(counterOut),
	.REF(REF));
   OR2X1 U1 (.Y(EN),
	.B(reCLK),
	.A(compOut));
endmodule

module DFF_decoder (
	Q, 
	D, 
	clk, 
	reset);
   output Q;
   input D;
   input clk;
   input reset;

   // Internal wires
   wire n1;
   wire n3;

   DFFSRX1 Q_reg (.SN(1'b1),
	.RN(n1),
	.QN(n3),
	.D(D),
	.CK(clk));
   INVX4 U3 (.Y(n1),
	.A(reset));
   INVX8 U5 (.Y(Q),
	.A(n3));
endmodule

module Counter4b (
	count, 
	RST, 
	globalReset, 
	clk);
   output [3:0] count;
   input RST;
   input globalReset;
   input clk;

   // Internal wires
   wire n4;
   wire n6;
   wire n7;
   wire n8;
   wire n9;
   wire n10;
   wire n11;
   wire n12;
   wire n13;
   wire n14;

   SDFFSRX1 count_reg_0_ (.SN(n4),
	.SI(1'b0),
	.SE(1'b0),
	.RN(RST),
	.Q(count[0]),
	.D(n14),
	.CK(clk));
   SDFFSRX1 count_reg_1_ (.SN(n4),
	.SI(1'b0),
	.SE(1'b0),
	.RN(RST),
	.Q(count[1]),
	.D(n13),
	.CK(clk));
   SDFFSRX1 count_reg_2_ (.SN(n4),
	.SI(1'b0),
	.SE(1'b0),
	.RN(RST),
	.QN(n7),
	.Q(count[2]),
	.D(n12),
	.CK(clk));
   SDFFSRX1 count_reg_3_ (.SN(n4),
	.SI(1'b0),
	.SE(1'b0),
	.RN(RST),
	.QN(n6),
	.Q(count[3]),
	.D(n11),
	.CK(clk));
   INVX4 U6 (.Y(n4),
	.A(globalReset));
   NAND2X2 U8 (.Y(n8),
	.B(count[1]),
	.A(n9));
   NAND2X2 U9 (.Y(n14),
	.B(n10),
	.A(count[0]));
   OAI21X1 U10 (.Y(n11),
	.B0(n6),
	.A1(n8),
	.A0(n7));
   XOR2X1 U11 (.Y(n12),
	.B(n8),
	.A(n7));
   XOR2X1 U12 (.Y(n13),
	.B(n9),
	.A(count[1]));
   AND2X1 U13 (.Y(n9),
	.B(n10),
	.A(count[0]));
   NAND3X1 U14 (.Y(n10),
	.C(count[3]),
	.B(count[1]),
	.A(count[2]));
endmodule

module Comparator4Bit (
	Vout, 
	A, 
	REF);
   output Vout;
   input [3:0] A;
   input [3:0] REF;

   // Internal wires
   wire n1;
   wire n2;
   wire n3;
   wire n4;
   wire n5;
   wire n6;
   wire n7;
   wire n8;
   wire n9;
   wire n10;

   INVX1 U3 (.Y(n1),
	.A(n7));
   INVX1 U4 (.Y(n2),
	.A(n8));
   INVX1 U5 (.Y(Vout),
	.A(n3));
   AOI21X1 U6 (.Y(n3),
	.B0(n5),
	.A1(A[3]),
	.A0(n4));
   NOR2X1 U7 (.Y(n5),
	.B(n6),
	.A(n4));
   AOI22X1 U8 (.Y(n6),
	.B1(n1),
	.B0(n2),
	.A1(A[2]),
	.A0(n7));
   AOI22X1 U9 (.Y(n8),
	.B1(n10),
	.B0(A[1]),
	.A1(A[0]),
	.A0(n9));
   NOR2X1 U10 (.Y(n9),
	.B(n10),
	.A(REF[0]));
   XOR2X1 U11 (.Y(n10),
	.B(REF[1]),
	.A(A[1]));
   XOR2X1 U12 (.Y(n7),
	.B(REF[2]),
	.A(A[2]));
   XOR2X1 U13 (.Y(n4),
	.B(REF[3]),
	.A(A[3]));
endmodule

module modifiedDFF (
	Q, 
	R, 
	clk);
   output Q;
   input R;
   input clk;

   // Internal wires
   wire n3;
   wire n1;

   INVX1 U3 (.Y(n1),
	.A(clk));
   NOR2X1 U4 (.Y(n3),
	.B(n1),
	.A(R));
   BUFX3 U5 (.Y(Q),
	.A(n3));
endmodule

module balanceBlock (
	balanceCLK, 
	globalReset, 
	osc, 
	REF, 
	reCLK);
   output balanceCLK;
   input globalReset;
   input osc;
   input [3:0] REF;
   input reCLK;

   // Internal wires
   wire compOut;
   wire [3:0] countOut;

   Counter4b counter2 (.count(countOut),
	.RST(reCLK),
	.globalReset(globalReset),
	.clk(osc));
   Comparator4Bit comparator2 (.Vout(compOut),
	.A(countOut),
	.REF(REF));
   modifiedDFF modifiedDFF1 (.Q(balanceCLK),
	.R(compOut),
	.clk(reCLK));
endmodule

module decoder (
	recoveredData, 
	recoveredCLK, 
	balancedCLK, 
	ManchesterCode, 
	osc, 
	REF, 
	globalReset);
   output recoveredData;
   output recoveredCLK;
   output balancedCLK;
   input ManchesterCode;
   input osc;
   input [3:0] REF;
   input globalReset;

   // Internal wires
   wire n4;
   wire delayPulse;
   wire n1;
   wire n3;

   delayBlock db1 (.delayPulse(delayPulse),
	.reCLK(n3),
	.REF(REF),
	.globalReset(globalReset),
	.osc(osc));
   DFF_decoder dff1 (.Q(recoveredData),
	.D(ManchesterCode),
	.clk(delayPulse),
	.reset(globalReset));
   balanceBlock bb1 (.balanceCLK(balancedCLK),
	.globalReset(globalReset),
	.osc(osc),
	.REF(REF),
	.reCLK(n1));
   XOR2X1 U1 (.Y(n4),
	.B(ManchesterCode),
	.A(recoveredData));
   BUFX3 U2 (.Y(n1),
	.A(n4));
   BUFX3 U3 (.Y(recoveredCLK),
	.A(n4));
   BUFX3 U4 (.Y(n3),
	.A(n4));
endmodule

